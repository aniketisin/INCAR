/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package incar;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.io.*;
/**
 *
 * @author aniket
 */

class MyCustomFilter extends javax.swing.filechooser.FileFilter {
    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with ".txt" extension
        return file.isDirectory() || file.getAbsolutePath().endsWith(".coor");
    }
    @Override
    public String getDescription() {
        // This description will be displayed in the dialog,
        // hard-coded = ugly, should be done via I18N
        return "PDB Files";
    }
}

public class MainPanel extends javax.swing.JFrame {

    /**
     * Creates new form MainPanel
     */
    File[] file = new File[100];
    int[] mark1 = new int[100];
    int[] mark2 = new int[100];
    int counter = 1;
    DataDisplay[] data = new DataDisplay[100];
    Integration[] mol = new Integration[100];
    public MainPanel() {
        initComponents();
        this.getContentPane().setBackground(Color.white);
        this.setResizable(false);
        jTable1.getTableHeader().setBackground(Color.white);
        //jTable1.getTableHeader().setFont(new java.awt.Font("Arial", java.awt.Font.PLAIN, 18));
    }
    
    public void Reset1(int cnt)
    {
        mark1[cnt] = 0;
    }
    public void Reset2(int cnt)
    {
        mark2[cnt] = 0;
    }
    
    public void Zoom(int cnt, int sz, int[] arr)
    {
        String cmd = "display all; select ";
        for(int i=0;i<sz-1;i++)
            cmd+=Integer.toString(arr[i])+", ";
        cmd+=Integer.toString(arr[sz-1])+"; ";
        cmd+="display selected; center selected";
        cmd+="; zoom 500;";
        //System.out.println(cmd);
        mol[cnt].exec(cmd);
    }
    
    public void DisplayAll(int cnt)
    {
        mol[cnt].exec("display all; zoom 200;");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        infoLabel = new javax.swing.JLabel();
        bg = new javax.swing.JLabel();

        jFileChooser1.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(240, 242, 242));
        setMinimumSize(new java.awt.Dimension(510, 330));
        getContentPane().setLayout(null);

        jButton1.setText("Upload");
        jButton1.setToolTipText("Click To upload PDB");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(60, 230, 110, 40);

        jButton2.setText("Help");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(390, 290, 80, 29);

        jTable1.setBorder(null);
        jTable1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "File Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(220, 10, 280, 270);

        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setText("Click on Upload to Choose PDB");
        getContentPane().add(infoLabel);
        infoLabel.setBounds(10, 280, 240, 30);

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/incar/bg.jpg"))); // NOI18N
        getContentPane().add(bg);
        bg.setBounds(0, 0, 510, 330);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int r = jFileChooser1.showOpenDialog(this);
        if(r==JFileChooser.APPROVE_OPTION)
        {
            file[counter] = jFileChooser1.getSelectedFile();
            String loc = getClass().getProtectionDomain().getCodeSource().getLocation().toString();
            loc = loc.substring(5,loc.length()-10);
            loc += "/";
            try
            {
                Process process_0 = new ProcessBuilder(new String[]{"/bin/bash","-c","perl " + loc + "../src/scripts/try.pl " + file[counter].getAbsolutePath()}).start();
                process_0.waitFor();
                
                Process process_1 = new ProcessBuilder(new String[]{"/bin/bash","-c","python "+loc+"../src/scripts/incarfinal28-7.py " + file[counter].getAbsolutePath() + " " + loc}).start();
                process_1.waitFor();
                
                Process process_2 = new ProcessBuilder(new String[]{"/bin/bash","-c","python "+ loc +"../src/scripts/allbiffinal_1.py "+ file[counter].getAbsolutePath()+" "+ file[counter].getAbsolutePath() +".out "+loc+" "+Integer.toString(counter)}).start();
                process_2.waitFor();
                
                Process process_3 = new ProcessBuilder(new String[]{"/bin/bash","-c","python "+ loc +"../src/scripts/stack1.py "+ file[counter].getAbsolutePath()+" "+ loc+" "+Integer.toString(counter)}).start();
                process_3.waitFor();
                
                Process process_4 = new ProcessBuilder(new String[]{"/bin/bash","-c","python "+ loc +"../src/scripts/stack2.py "+ loc+" "+Integer.toString(counter)}).start();
                process_4.waitFor();
                
                Process process_5 = new ProcessBuilder(new String[]{"/bin/bash","-c","python "+ loc +"../src/scripts/stack3.py "+ loc+" "+Integer.toString(counter)}).start();
                process_5.waitFor();
                
                Object[] row = {counter, file[counter].getName()};
                javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
                model.addRow(row);
                counter++;
            }
            catch (Exception ex)
            {
                System.out.print(ex);
            }
        }
        else
        {
            System.out.println("File cant be accessed\n");
        }
        infoLabel.setText("Select a file from the above list");
    }//GEN-LAST:event_jButton1ActionPerformed

    public void HBonds(int cnt)
    {
        String y,x = file[cnt].getAbsolutePath().toString() + ".out";
        //System.out.println(file[cnt].getAbsolutePath().toString() + ".out");
        int discard = 0;
        try{
            BufferedReader r = new BufferedReader(new FileReader(x));
            while((y = r.readLine()) != null)
            {
                //System.out.print(y);
                if(y.isEmpty())continue;
                if(discard < 2){discard++; continue;}
                //System.out.print(y);
                String[] a = y.split("\\s+");
                String cmd = "set monitor off; monitor ";
                if( Integer.parseInt(a[1]) == 0 )
                    continue;
                cmd += a[1] + " ";
                cmd += a[6];
                mol[cnt].exec(cmd);
                //System.out.println(cmd);
            }
        }
        catch(Exception ex)
        {
            System.out.print(ex);
        }
    }
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int row = jTable1.rowAtPoint(evt.getPoint());
        int col = jTable1.columnAtPoint(evt.getPoint());
        if(row >= 0 && col >= 0)
        {
            if(mark1[row+1]==0)
            {
                mark1[row+1] = 1;
                data[row+1] = new DataDisplay(this,row+1);
                data[row+1].setVisible(true);
                data[row+1].showHBOND(file[row+1].getAbsolutePath().toString() + ".out");
                String loc = getClass().getProtectionDomain().getCodeSource().getLocation().toString();
                loc = loc.substring(5,loc.length()-10);
                loc += "/";
                data[row+1].showStacks(loc+"../src/tmp/stacked_bases_"+Integer.toString(row+1));
            }
            if(mark2[row+1]==0)
            {
                mark2[row+1] = 1;
                mol[row+1] = new Integration(file[row+1].getAbsolutePath().toString(),this,row+1);
                mol[row+1].myJmolViewer();
                mol[row+1].exec("delay; move 360 0 0 0 0 0 0 0 4;");
                HBonds(row+1);
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String loc = getClass().getProtectionDomain().getCodeSource().getLocation().toString();
        loc = loc.substring(5,loc.length()-10);
        loc += "/../Documentation/Documentation.pdf";
        try
        {
            Process process_0 = new ProcessBuilder(new String[]{"/bin/bash","-c","evince "+loc}).start();
            process_0.waitFor();
        }
        catch(Exception ex)
        {
            System.out.print(ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPanel().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bg;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
